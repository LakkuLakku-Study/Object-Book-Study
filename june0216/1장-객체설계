# 들어가며

- 패러다임 전환 → 절차형 패러다임에서 객체 지향 패러다임으로의 변화
- 프로그래밍 패러다임 → 동일한 규칙과 표준에 따라 프로그램을 작성할 수 있게 된다.
    - 각 프로그래밍 언어가 제공하는 특징과 프로그램이 스타일은 해당 언어가 채택하는 프로그래밍 패러다임에 따라 달라진다.
    - 1) 두 패러다임은 함께 존재할 수 있다.
        - 객체 지향 패러다임과 절차형 패러다임은 공존하여 서로의 장단점을 보완할 수 있다.
            - → 하나 이상의 패러다임을 수용하는 언어 → 다중패러다임 언어
    - 2) 패러다임끼리 비교할 수 있다.
        - 객체지향 패러다임의 경우 절차형 패러다임의 기반 위에서 구축되었으므로 서로 비교할 수 있다.
    - 3) 발전적이다.
        - 과거에 있던 패러다임의 단점을 보완하는 발전적인 과정을 거친다.

---

- 이론보다 실무가 먼저
    - 해당 분야가 성숙해지는 시점에 이르러서야 이론이 실무를 추월하게 된다.

# 티켓 판매 애플리케이션 구현하기

- 이벤트 → 추첨을 통해 선정된 관람객에게 공연을 무료로 관람할 수 있는 초대장 발송
    - 공연 입장 시, 이벤트 당첨자와 이벤트 미당첨자는 차이가 있다.
        - 이벤트 당첨자는 초대장을 티켓으로 교환한 후 입장하게 하고 이벤트 미당첨자는 티켓을 구매하여 입장하도록 해야한다.

- 초대장 클래스
    
    ```jsx
    public class Invitation{
    	private LocalDateTime when; // 공연을 관람할 수 있는 초대일자 
    	}
    ```
    
- 티켓 클래스
    
    ```jsx
    public class Ticket{
    	private Long fee;
    	
    	public long getFee(){
    		return fee;
    	}
    }
    ```
    
    - Bag 클래스
        - 관람객 소지품 보관할 클래스
        - 소지품 = 초대장 , 현금, 티켓
    
    ```jsx
    public class Bag {
        private Long amount; // 현금
        private Invitation invitation; // 초대장
        private Ticket ticket; // 티켓
        
        // 2가지 경우의 관람객 소지품이 있으므로 이를 인스턴스 생성하는 시점에 제약을 강제할 수 있도록 생성자를 추가한다. 
        public Bag(long amount) { // 경우 1) 초대장이 없이 현금만 가져오는 경우 
            this(null, amount);
        }
    
        public Bag(Invitation invitation, long amount) { // 경우 2) 초대장이 있어서 초대장과 현금을 보관하는 경우 
            this.invitation = invitation;
            this.amount = amount;
        }
    
        public boolean hasInvitation() { // 초대장 보유 여부를 판단
            return invitation != null;
        }
    
        public boolean hasTicket() { // 티켓 소유 여부르 ㄹ판단
            return ticket != null;
        }
    
        public void setTicket(Ticket ticket) { // 초대장 -> 티켓으록 교환
            this.ticket = ticket;
        }
    
        public void minusAmount(Long amount) { // 현금을 감소
            this.amount -= amount;
        }
    
        public void plusAmount(Long amount) { // 현금 증가 
            this.amount += amount;
        }
    }
    ```
    
- 관람객
    - 관람객이 소지품을 보관하기 위해 가방을 소지할 수 있음
    
    ```jsx
    public class Audience {
        private Bag bag;
    
        public Audience(Bag bag) {
            this.bag = bag;
        }
    
        public Bag getBag() {
            return bag;
        }
    }
    ```
    
- TicketOffice
    - 역할 : 소극장에 입장하기 위해서 매표소에서 1) 티켓 구매 2) 초대장을 티켓으로 교환
    - 매표소에는 관람객에게 판매할 티켓과 티켓의 판매 금액이 보관되어 있어야 한다.
    
    ```java
    
    public class TicketOffice {
        private Long amount; // 판매 금액 
        private List<Ticket> tickets = new ArrayList<>(); // 교환해줄 티켓 목록 
    
        public TicketOffice(Long amount, Ticket ... tickets) {
            this.amount = amount;
            this.tickets.addAll(Arrays.asList(tickets));
        }
    
        public Ticket getTicket() { // Ticket 컬렉션에서 맨 첫 번째 위치에 저장된 Ticket을 반환
            return tickets.remove(0);
        }
    
        public void minusAmount(Long amount) { // 판매 금액을 차감
            this.amount -= amount;
        }
    
        public void plusAmount(Long amount) { // 판매 금액 더하기 
            this.amount += amount;
        }
    }
    ```
    
- 판매원
    - 역할 : 1) 초대장을 티켓으로 교환 2) 티켓을 판매
    - 자신이 일하는 매표소(TicketOffice)를 알고 있어야 한다.
    
    ```java
    public class TicketSeller {
        private TicketOffice ticketOffice;
    
        public TicketSeller(TicketOffice ticketOffice) { // 자신이 일하는 곳을 알고 있어야 한다. 
            this.ticketOffice = ticketOffice;
        }
    
        public TicketOffice getTicketOffice() {
            return ticketOffice;
        }
    }
    ```
    
- 소극장
    - 역할 : 관람객 맞이
    
    ```java
    public class Theater {
        private TicketSeller ticketSeller;
    
        public Theater(TicketSeller ticketSeller) {
            this.ticketSeller = ticketSeller;
        }
    
        public void enter(Audience audience) { // 관람객 맞이 
            if (audience.getBag().hasInvitation()) { // 관람객의 가방 안에 초대장이 있는지 확인
                Ticket ticket = ticketSeller.getTicketOffice().getTicket(); // 판매원에게서 받은 티켓을  
                audience.getBag().setTicket(ticket); //관람객의 가방에 넣어준다.
            } else {
                Ticket ticket = ticketSeller.getTicketOffice().getTicket(); // 티켓을 사서 
                audience.getBag().minusAmount(ticket.getFee()); // 해당 금액만큼 차감
                ticketSeller.getTicketOffice().plusAmount(ticket.getFee()); // 매표소의 금액을 증가 
                audience.getBag().setTicket(ticket); //관람객의 가방 안에 티켓을 넣어준다. 
            }
        }
    }
    ```
    

# ⚠️무엇이 문제인가 ⚠️

- 소프트웨어 모듈이 가져야 하는 3가지 기능 (by Robert Martin)
    - 모듈 == 크기와 상관없이 클래스나 패키지, 라이브러리와 같이 프로그램을 구성하는 임의의 요소
    - 목적 1) 실행 중에 **제대로 동작**
    - 목적 2) **변경**을 위해 존재하는 것이다.
        - 대부분의 모듈은 생명주기 동안 변경되기 때문에 간단한 작업만으로도 변경 가능해야한다.
        - 변경하기 **어려운 모듈은 제대로 동작하더라도 개선해야한다.**
    - 목적 3) 코드를 읽는 사람과 **의사소통**하는 것
        - 모듈은 특별한 훈련 없이도 개발자가 읽기 쉽고 이해할 수 있어야 한다.
    
- 위의 코드는 변경 용이성과 이해하기 쉬워야 한다를 만족시키지 못한다.

## 💩 예상을 빗나가는 코드

### 1) 이해하기 어려운 코드

- Theater 클래스의 enter 메서드가 수행하는 일
    - 관람객과 판매원이 소극장의 통제를 받는 수동적인 존재
        - 관람객 → 초대장 확인할 때 관람객이 아닌 소극장이 열어본다.
            - 가방을 제 3자가 열 수 있음 (허벌 가방)
        - 판매원 → 소극장이 직접 매표소에 보관 중인 티켓과 현금에 접근한다.
            - 무인 아이스크림점 느낌
            - 티켓이 알아서 사라지고 저절로 돈이 쌓임
    - **보통의 경우(상식적으로)는 관람객의 가방은 본인만 열 수 있고, 티켓과 현금은 판매원이 관리한다.**
        - 하지만 이런 상식에 벗어난 코드이므로 사람들과 의사소통 시 어려움이 있을 것이다.
        - 즉, “이해가능한 코드”에서 벗어난 코드라고 할 수 있다.
    

### 2) 변경에 취약

- 코드를 이해하기 위해서 여러 가지 세부적인 내용들을 한꺼번에 기억하고 있어야 한다.
    - 극장의 enter 메서드는 아래의 사실들을 동시에 기억하고 있어야 한다.
        - 1) Audience, Bag를 가지고 있고
        - 2) Bag안에는 현금과 티켓이 들어있으며
        - 3) TicketSeller가 TicketOffice에서 티켓을 판매하고
        - 4) TicketOffice안에 돈과 티켓이 보관되어 있다는 것
    - 너무 많은 세부 사항을 다루기 때문에 코드를 작성하는 사람뿐만 아니라 코드를 읽고 이해하는 사람 모두에게 큰 부담을 준다. 이거보다 더 큰 문제는 아래의 문제이다.
- [ 문제 ] Audience 와 TicketSeller를 변경할 경우 Theater도 함께 변경해야한다.
    - 가정을 하여 짠 코드 부분이 있는데 그 가정이 깨지는 순간 모든 코드가 일시에 흔들리게 된다.
        - 이 코드는 관람객이 현금과 초대장을 보관하기 위해 가방을 가지고 있다고 가정한다.
        - 하지만 관람객이 가방을 들고 있지 않다면?, 관람객이 현금이 아니라 신용카드를 사용한다면?, 판매원이 매표소 밖에서 티켓을 판매해야 한다면?
        - → 코드가 일시에 흔들리게 된다.
    - ex) 관람객이 가방을 들고 있다는 가정이 바뀌었다고 상상해보자
        - 변경 1) Audience 클래스에서 Bag를 제거해야한다.
        - 변경 2) Audience의 Bag에 직접 접근하는 Theater의 enter 메서드 역시 수정해야 한다.
- 즉, 관람객이 가방을 들고 있고 판매원이 매표소에서만 티켓을 판매한다는 지나치게 세부적인 사실에 의존해서 동작한다.
    - 하지만 의존하는 객체가 많아지면 변경 시 함께 변경해야하는 부분이 많아진다.
- 객체 사이의 **“의존성”은 변경에 대한 영향을 암시**한다.
    - 의존성 말 속에는 “어떤 객체가 변경될 때 그 객체에게 의존하는 다른 객체도 함께 변경 될 수 있다는 사실이 내포”
    - **⇒ 필요한 최소한의 의존성만 유지하고 불필요한 의존성을 제거하자**
        - 객체 지향 설계는 서로 의존하면서 협력하는 객체들의 공동체를 구축하는 것이므로 완전히 의존을 없애는 것이 아니라 필요한 최소한의 의존성만 유지하자

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/e2c6ccd4-4439-43db-96e9-e654aaf4aa71/1cd326bb-2fcd-4d2d-9bd6-77df660760d8/image.png)

- 객체 사이의 의존성이 과한 경우 ⇒ “결합도가 높다”
    - 결합도 == 모듈과 모듈간의 상호 의존도
    - 두 객체 사이의 **결합도가 높으면 높을수록 함께 변경될 확률도 높**아지기 때문에 변경하기 어려워진다.
    - **⇒ 객체 사이의 결합도를 낮춰 변경이 용이한 설계를 만들자**

# 🧚설계 개선하기

- 로버트 마틴이 이야기한 모듈의 3가지 목적 중 **1) “변경”**과  **2) “의사소통”**은 서로 엮여 있다.
    - 코드를 이해하기 어려운 이유는 극장이 관람객의 가방과 판매원의 매표소에 직접 접근하기 때문
    - == 우리의 직관(자기가 소유한 것인데 남이 처리한다)에 벗어난다
        - ⇒ 의도를 정확하게 의사소통을 하지 못하기 때문에 이해가 어려운 코드

- Theater가 관람객의 가방과 판매원의 매표소에 직접 접근 == Theater가 Audience와 TicketSeller에 결합된다.
    - 변경 시 함께 변경해야한다.
- 해결 방법 == **Theater가 Audience와 TicketSeller에 관해 너무 세세한 부분까지 알지 못하도록 정보를 차단하면 된다.**
    - 관람객이 가방을 가지고 있다는 사실과 판매원이 매표소에서 티켓을 판매한다는 사실을 Theater가 알아야 할 필요가 없다.
        
        ![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/e2c6ccd4-4439-43db-96e9-e654aaf4aa71/6ccc7fad-ccf9-499a-91ae-19b7ef9e1708/image.png)
        
    - 극장이 원하는 것은 **관람객이 소극장에 입장하는 것**뿐이다.
        - → 따라서 관람객이 스스로 가방 안의 현금과 초대장을 처리하고 판매원이 스스로 티켓과 판매 요금을 다루게 한다면 모든 문제를 한 번에 해결할 수 있다.
        - ⇒ **즉, 관람객과 판매원을 “자율적인 존재”로 만들면 된다.**

### 🕊️자율성을 높이자 🕊️

- Audience와 TicketSeller가 직접 Bag와 TicketOffice에 접근하는 자율적인 존재가 되도록 설계를 변경하자
- **1 단계 ) Theater의 enter 메서드에서 TicketOffice에 접근하는 모든 코드를 TicketSeller 내부로 숨기는 것**
    - TicketSeller에 sellTo 메서드 추가하고 Theater에 있던 로직을 이 메서드로 옮기자
        
        ```java
        class TicketSeller {
          private TicketOffice ticketOffice;
        
          public TicketSeller(TicketOffice ticketOffice) {
            this.ticketOffice = ticketOffice;
          }
          
          ~~public TicketOffice getTicketOffice() {~~ // Theater의 enter코드에서 "ticketSeller.getTicketOffice().getTicket();" 이렇게 쓰임
          // 이 코드를 삭제하여 외부에서 판매소에 접근 불가능하게 되었다. 
          // 해당 코드는 판매원이 아니라 매표소가 직접 표를 주는 비상식적인 코드, 즉 제 3자가 하게할 수 있는 메서드이므로 삭제 
          // 그 결과 판매소에 대한 접근은 오직 판매원 안에서만 가능하게 되었다. -> 즉, 판매원 스스로 티켓을 꺼내는 등 스스로 하게 되었다. 
                ~~return ticketOffice;
            }~~
        
        // New!!!
          public void sellTo(Audience audience){ // Theater의 enter에 있던 내용을 판매자 클래스에 옮기기 
            if (audience.getBag().hasInvitation()) {
              Ticket ticket = this.ticketOffice.getTicket();
              audience.getBag().setTicket(ticket);
            } else {
              Ticket ticket = this.ticketOffice.getTicket();
              audience.getBag().minusAmount(ticket.getFee());
              this.ticketOffice.plusAmount(ticket.getFee());
              audience.getBag().setTicket(ticket);
            }
          }
        }
        ```
        
    - **객체 내부의 세부사항을 감추는 것 == 캡슐화**
        - TicketOffice에 접근할 수 없게 막음
    - **캡슐화 목적**
        - 변경하기 쉬운 객체를 만드는 것
        - 객체 내부로의 접근을 제한하면 **객체와 객체 사이의 결합도를 낮출 수 있기 때문에** 설계를 좀 더 쉽게 변경할 수 있다.
    - **이로 인해 변경된 Theater 코드**
        - 극장에서 판매소에 접근하지 않는다.
        - 극장 입장에서는 판매소가 ticketSeller 내부에 존재한다는 사실은 알지 X
        - 단지 ticketSeller가 sellTo메시지를 이해하고 응답할 수 있다는 사실만 알고 있다. o
        
        ```java
        public class Theater {
            private TicketSeller ticketSeller;
        
            public Theater(TicketSeller ticketSeller) {
                this.ticketSeller = ticketSeller;
            }
        
            public void enter(Audience audience) { // 관람객 맞이 
        		    ticketSeller.sellTo(audience);
        	  }
        }
        ```
        
        - Theater는 오직 ticketSeller의 인터페이스에만 의존한다.
            - TicketOffice가 내부에 TicketOffice 인스턴스를 포함하고 있다는 사실은 **“구현”**영역에 속한다.
            - ⇒ **객체를 인스턴스와 구현으로 나누고 인스턴스만을 공개하는 것**은 객체 사이의 결합도를 낮추고 변경하기 쉬운 코드를 작성하기 위해 따라야 하는 가장 기본적인 설계 원칙
            
            ![스크린샷 2024-08-13 오후 5.11.26.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/e2c6ccd4-4439-43db-96e9-e654aaf4aa71/5d7266a8-af48-4384-86cc-df011af6815c/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2024-08-13_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_5.11.26.png)
            

- 변경된 클래스 사이의 의존성을 보면 Theater에서 TicketSeller 의존성이 제거 되었다. → 성공적으로 캡슐화되었다.

- **2단계 ) Audience의 캡슐화를 개선**
    - TicketSeller가 직접 Audience의 getBag를 호출하여 직접 접근하는 부분을 수정하자 (Audience를 자율적인 존재로 만들자)
    - Bag에 접근하는 모든 로직을 Audience 내부로 감추기 위해
        - Audience에 buy 메서드를 추가하고
        - TicketSeller의 sellTo 메서드에서 getBag 메서드에 접근하는 부분을 buy 메서드로 옮기기
    
    - Audience
        
        ```java
        class Audience {
            private Bag bag;
        
            public Audience(Bag bag) {
                this.bag = bag;
            }
          
        	 ~~public Bag getBag() {~~
        	 // 외부에서 가방을 열어보지 못하도록 캡슐화함 
                ~~return bag;
            }~~
          
          
          // NEW !!!
        		public Long buy(Ticket ticket) {
                if (bag.hasInvitation()) { // 관람객이 직접 자신의 가방에 초대장이 있는지 확인 
                    bag.setTicket(ticket);
                    return 0L;
                } else {
                    bag.setTicket(ticket);
                    bag.minusAmount(ticket.getFee());
                    return ticket.getFee();
                }
            }
        
        }
        ```
        
    - TicketSeller
        
        ```java
        class TicketSeller {
          private TicketOffice ticketOffice;
        
          public TicketSeller(TicketOffice ticketOffice) {
            this.ticketOffice = ticketOffice;
          }
          
        
        // New!!!
          public void sellTo(Audience audience) { // 가방을 열어하는 행위를 다 Audience에 옮기기 
            ~~if (audience.getBag().hasInvitation()) {~~
              Ticket ticket = this.ticketOffice.getTicket();
              ~~audience.getBag().setTicket(ticket);
            } else {~~
              Ticket ticket = this.ticketOffice.getTicket();
              ~~audience.getBag().minusAmount(ticket.getFee());
              this.ticketOffice.plusAmount(ticket.getFee());
              audience.getBag().setTicket(ticket);
            }
          }~~
          }
        }
        ```
        
        - 최종
        
        ```java
        class TicketSeller {
          private TicketOffice ticketOffice;
        
          public TicketSeller(TicketOffice ticketOffice) {
            this.ticketOffice = ticketOffice;
          }
          
        
        // New!!!
          public void sellTo(Audience audience) { // Theater의 enter에 있던 내용을 판매자 클래스에 옮기기 
        		ticketOffice.plusAmount(audience.buy(ticketOffice.getTicket()));
          }
        }
        ```
        

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/e2c6ccd4-4439-43db-96e9-e654aaf4aa71/a6bb325b-e554-4b00-a689-ad8b9a67482a/image.png)

- 수정 후 TicketSeller와 Audience 사이의 결합도가 낮아짐
    - 내부 구현이 캡슐화됐으므로 Audience의 구현을 수정하더라도 TicketSeller에는 영향을 미치지 않는다.

## ❗무엇이 개선됐는가?

- 1) 의사소통이 가능한 코드가 되었다 (모듈의 목적 중 하나)
    - 수정된 Audience와 TicketSeller는 자신이 가지고 있는 소지품을 스스로 관리한다.
    - 상식과 일치
- 2) 코드 변경 용이성 개선
    - Audience와 TicketSeller의 내부 구현을 변경하더라도 Theater을 함께 변경할 필요가 없어짐
        - ex) 가방이 아니라 작은 지갑으로 변경하고 싶은 경우 → Audience 내부만 변경
        - ex) 돈을 매표소가 아닌 은행에 보관하고자 한다면 → TicketSeller 만 변경

## ❓어떻게 한 것인가.

- 자기 자신의 문제를 스스로 해결하도록 코드를 변경한 것
    - **판매자가 티켓을 판매하기 위해** **TicketOffice를 사용하는 모든 부분을** TicketSeller로 옮기고
    - **관람객이 티켓을 구매하기 위해** Bag을 사용하는 모든 부분을 Audience로 옮긴 것이다.
- 객체의 자율성을 높이는 방향으로 개선함 ⇒ 이해하기 쉽고 유연한 설계 얻음

## 🙅‍♀️ 🙆‍♀️ 캡슐화와 응집도

- 핵심은 객체 내부의 상태를 캡슐화하고 객체 간에 오직 메시지를 통해서만 상호작용하도록 만드는 것이다.
    - ex) Theater은 TicketSeller의 내부에 대해 알지 못하고 단지 TicketSeller가 sellTo 메시지를 이해하고 응답할 수 있다는 사실만 알고 있다.
- 밀접하게 연관된 작업만 수행하고 연관성이 없는 작업은 다른 객체에게 위임하는 객체 == 응집도가 높다.
- 자신의 데이터를 스스로 처리하는 자율적인 객체를 만들면
    - 결합도☝️ 응집도👇
- 객체의 응집도를 높이기 위해서는 객체 스스로 자신의 데이터를 책임져야 한다.
    - 자율적인 존재로 만드는 것이 응집도를 높이는 첫걸음!
    - 외부의 간섭을 최대한 배제하고 메시지를 통해서만 협력하는 자율적인 객체들의 공동체를 만드는 것 == 훌륭한 객체지향 설계를 얻을 수 있다

## 절차지향과 객체지향

- 수정 전 입장하기 위한 코드를 보면
    - Audience와 TicketSeller로부터 Bag, TicketOffice를 가져와 관람객을 입장시키는 절차를 구현함
        - **정보 제공**은 → Audience와 TicketSeller,  Bag, TicketOffice에서 하고
            - 프로세스(process)이다.
        - 모든 **처리**는 → Theater의 enter메서드 안에 존재함
            - 데이터(data)이다.
- 이처럼 프로세스와 데이터를 별도의 모듈에 위치시키는 방식 ⇒ “절차적 프로그래밍”

### 절차적 프로그래밍

- 절차적인 프로그래밍 방식으로 작성된 코드의 전형적인 의존성 구조
    - 프로세스를 담당하는 Theater가 Audience와 TicketSeller,  Bag, TicketOffice 모두에 의존하고 있음
        - **모든 처리가 하나의 클래스 안에 위치하고 나머지 클래스는 단지 데이터의 역할만 수행하기 때문이다.**
- 문제점
    - 절차적 프로그래밍은 우리의 직관에 위배된다.
        - 관람객과 판매원이 수동적인 존재가 된다.
        - 직관에 위배되기 때문에 의사소통을 원활하게 하지 못함
    - 절차적 프로그래밍의 더 큰 문제는 데이터의 변경으로 인한 영향을 지역적으로 **고립시키기 어려우므로** 한 번 변경할 때 다른 의존하고 있는 코드들도 다 변경해야 하므로 변경이 어렵게 만든다.
        - ex) 관람객, 판매원의 내부 구현을 변경하면 극장 코드도 변경해야 한다.
        - 변경하기 쉬운 설계는 한 번에 하나의 클래스만 변경할 수 있는 설계이지만
            - 절차적 프로그래밍은 프로세스가 **필요한 모든 데이터에 의존해야 한다**는 근본적인 문제점 때문에 변경에 취약할 수 밖에 없다.
- 해결 방법
    - 자신의 데이터를 스스로 처리하도록 프로세스의 적절한 단계를 Audience와 TicketSeller로 이동시키는 것
        - 즉, 프로세스가 데이터를 소유하고 있는 곳으로 옮긴다.
    - 데이터와 프로세스가 동일한 모듈 내부에 위치하도록 프로그래밍 하는 방식 == 객체지향 프로그래밍
- 장점
    - 객체지향으로 바꾼 결과 TicketSeller 입장에서는 Audience에 대한 의존성이 또 하나 추가되었지만 의존성은 적절히 통제되고 있으며 하나의 변경의 여파가 여러 클래스로 전파되는 것을 효율적으로 억제한다.
- **훌륭한 객체지향의 핵심은 캡슐화를 이용해 의존성을 적절히 관리하여 객체 사이의 결합도를 낮추는 것이다.**

## 책임의 이동

- 절차지향과 객체지향 방식의 근본적인 차이를 만드는 것은 “책임의 이동”이다.
    - 책임 == 기능을 가리키는 객체 지향 세계의 용어

![스크린샷 2024-08-13 오후 6.04.46.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/e2c6ccd4-4439-43db-96e9-e654aaf4aa71/61a38a03-04f7-4a68-a7a4-30c37d55764a/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2024-08-13_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_6.04.46.png)

- 작업의 흐름이 주로 Theater에 의해 제어가 된다.
    - == Theater에 책임이 집중돼 있다.

![스크린샷 2024-08-13 오후 6.05.01.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/e2c6ccd4-4439-43db-96e9-e654aaf4aa71/d5a46c81-2635-4ba4-9249-cfb12d336cc1/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2024-08-13_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_6.05.01.png)

- 객체지향의 설계에서는 제어 흐름이 각 객체에 적절하게 분산돼 있음
    - 하나의 기능을 완성하는 데 필요한 책임이 여러 객체에 걸쳐 분산돼 있다.
    - 절차지향의 경우 Theater가 전체적인 작업을 도맡아 했지만 객체지향으로 변경된 후 책임이 개별 객체로 이동함 (== 책임의 이동)
    - 각 객체는 자신을 스스로 책임진다.
- 객체지향 애플리케이션은 스스로 책임을 수행하는 자율적인 객체들의 공동체를 구성함으로써 완성
    - 이런 관점에서 객체지향은 데이터와 프로세스를 하나의 단위로 통함해 놓는 방식으로 표현하기도 한다.

- 객체지향의 핵심은 데이터와 프로세스를 단순히 하나의 객체 안으로 모으는 것 이상으로 적절한 객체에 적절한 책임을 할당하는 것이다.
    - “객체가 어떤 데이터를 가지느냐보다는 객체에 어떤 책임을 할당할 것이냐”에 초점을 맞춰야 한다.
        - TikcetSeller의 책임 = 티켓을 판매하는 것
        - Audience의 책임 = 티켓을 사는 것
        - Theater의 책임 = 관람객을 입장시키는 것

- 설계를 어렵게 만드는 것은 의존성이다. 🦹‍♂️
    - 해결방법은 불필요한 의존성을 제거하여 객체 사이의 결합도를 낮추는 것
        - ex) 특정 객체가 몰라도 되는 세부사항을 책임을 가지는 객체의 내부로 감춰 캡슐화한다.
    - 이를 통해 객체의 자율성을 높이고 응집도를 높일 수 있다.

## 더 개선할 수 있다.

- Audience 객체는 자율적인 존재이므로 스스로 티켓을 구매하고 가방 안에 내용물을 직접 관리한다.
- 하지만 Bag는 수동적이므로 Audience가 관리한다.
    - 자율적인 존재로 바꿔보자
    - → Bag의 내부 상태에 접근하는 모든 로직을 Bag안으로 캡슐화하여 결합도를 낮추자
    - Bag안에 내용물들을 스스로 상태 처리하도록 hold 메서드 추가
        
        ```java
        public class Bag {
            private Long amount;
            private Ticket ticket;
            private Invitation invitation;
            
            //NEW!
        
            public Long hold(Ticket ticket) {
                if (hasInvitation()) {
                    setTicket(ticket);
                    return 0L;
                } else {
                    setTicket(ticket);
                    minusAmount(ticket.getFee());
                    return ticket.getFee();
                }
            }
            
            //외부에서 사용할 수 없게 private으로 변경
        
            private void setTicket(Ticket ticket) {
                this.ticket = ticket;
            }
        
            private boolean hasInvitation() {
                return invitation != null;
            }
        
            private void minusAmount(Long amount) {
                this.amount -= amount;
            }
        }
        ```
        
    - Audience
        
        ```java
        public class Audience {
            private Bag bag;
        
            public Audience(Bag bag) {
                this.bag = bag;
            }
        
        		public Long buy(Ticket ticket) {
                ~~if (bag.hasInvitation()) { 
                    bag.setTicket(ticket);
                    return 0L;
                } else {
                    bag.setTicket(ticket);
                    bag.minusAmount(ticket.getFee());
                    return ticket.getFee();
                }~~
                //new!
        ~~~~        return bag.hold(ticket);
            }
        }
        ```
        
    - TicketSeller
        - TicketOffice의 자율권 침해
            - TicketSeller은 자기 마음대로 티켓 꺼내고 현금 넣고 뺀다.
        
        ```java
        class TicketSeller {
          private TicketOffice ticketOffice;
        
          public TicketSeller(TicketOffice ticketOffice) {
            this.ticketOffice = ticketOffice;
          }
          
        
          public void sellTo(Audience audience) {
          //TicketOffice의 자율권 침해 
        		~~ticketOffice~~.~~plusAmount(audience.buy~~(~~ticketOffice.getTicket()~~)); 
        		
        		
        		//new!
        		ticketOffice.sellTicketTo(audience); // ticketOffice의 구현이 아닌 인터페이스에만 의존할 수 있게 되었다. 
          }
        }
        ```
        
    - TicketOffice
        
        ```java
        public class TicketOffice {
            private Long amount;
            private List<Ticket> tickets = new ArrayList<>();
        
            public TicketOffice(Long amount, Ticket... tickets) {
                this.amount = amount;
                this.tickets.addAll(Arrays.asList(tickets));
            }
        
        //new!
            public void sellTicketTo(Audience audience) {
                plusAmount(audience.buy(getTicket())); // 스스로 티켓을 주기 
            }
        
            private Ticket getTicket() {
                return tickets.remove(0);
            }
        
            private void plusAmount(Long amount) {
                this.amount += amount;
            }
        }
        ```
        
- 이렇게 변경했는데 TicketOffice가 Audience와의 의존성이 추가되어 전체 설계관점에서 결합도가 상승했다. ㅠ
    - 트레이드오프 시점이 왔다.
    - 어떤 걸 우선해야하는가? (자율도냐 결합도냐 그것이 문제로다)
    - 개발팀은 자율성 보다는 Audience에 대한 결합도를 낮추는 것이 더 중요하다는 결론에 도달함

- 이 예제를 통해 2가지를 알게 되었다.
    - 1) 어떤 기능을 설계하는 방법은 한 가지 이상일 수 있다.
    - 2) 동일한 기능을 한 가지 이상의 방법으로 설계할 수 있으므로 설계는 트레이드오프의 산물이다.
    

## 그래, 거짓말이다!

- 앞서, Audience와 TicketSeller가 자율적인 것이 우리의 일상 상식과 맞다고 했다.
- 하지만 Theater, Bag가 자율적인 것이 상식적으로 맞는가? 아니다.
    - 가방 스스로 물건을 관리하지 않는다(무섭..)
    - 하지만 우리는 설계를 하면서 Theater, Bag(무생물)을 생물처럼 다루고 자율적인 존재로 취급했다.
- 비록 현실에는 수동적인 존재라고 하더라도 일단 객체 지향의 세계에 들어오면 모든 것이 능동적이로 자율적인 존재로 바뀐다.
    - 라꾸라꾸(다이어리꾸미기 서비스)에서 다이어리도 자아가 있다.
    - 이처럼 능동적이고 자율적인 존재로 소프트웨어 객체를 설계하는 원칙을 “의인화”라고 한다.
- 즉, 앞서 실세계에서의 생물처럼 스스로 생각하고 행동하도록 객체를 설계하는 것이 이해하기 쉬운 코드를 작성하는 것이라고 했는데 말을 조금 바꿔 **모든 객체들이 자율적으로 행동하는 설계**라고 하겠다!

# 객체지향 설계

## 설계가 왜 필요한가?

- 설계란 코드를 배치하는 것이다.
- 설계는 코드 작성의 일부이며 코드를 작성하지 않고서는 검증할 수 없다.
    - 설계와 구현을 떨어뜨려서 이야기하는 것은 불가능
    - **설계는 코드를 작성하는 매 순간 코드를 어떻게 배치할 것인지 결정하는 과정에서 나온다.**
        - 데이터와 프로세스를 함께 배치 or 따로 배치
- 좋은 설계란?
    - 두 가지 요구사항 만족
        - 1) 오늘 완성해야 하는 기능을 구현하는 코드를 짜야 하는 동시에
        - 2) 내일 쉽게 변경할 수 있는 코드를 짜야 한다.
- **변경을 수용**할 수 있는 설계가 중요한 이유
    - 1) 요구사항이 항상 변경되기 때문이다.
        - 개발이 진행되는 동안 요구사항은 바뀔 수 밖에 없기 때문에 개발 시작시점에 모든 요구사항을 수집하는 것은 불가능
    - 2) 코드를 변경할 때 버그가 추가될 가능성이 높음
        - 요구사항 변경 → 코드 수정 초래 → 코드 수정은 버그 발생 가능성을 높임

## 객체지향

- 변경에 유연한 대응이 가능하게 한다.
- 변경 가능한 코드 == 이해하기 쉬운 코드
- 단순히 데이터와 프로세스를 같은 객체에 함께 둔다고 해서 변경하기 쉬운 설계를 얻는 것은 아니다.
    - 객체지향의 세계에서 애플리케이션은 객체들로 구성되며 애플리케이션의 기능은 객체들간의 상호작용을 통해 구현된다.
        - ex) TicketSeller는 Audience의 buy 메서드를 전송한다.
    - 객체들이 협력하는 과정 속에서 객체들은 다른 객체에 의존하게 된다.
        - TicketSeller는 Audience에 buy메서드를 호출하기 위해서는 Audience를 알고 있어야 한다.
        - → 즉, 두 객체을 결합시키고 이는 의존성이 만들어지게 된다.
        - 이 의존성을 너무 많이 만들면 변경하기 어렵기 때문에 이를 적절하게 관리하는 설계가 중요하다.
